'use strict';

var app = angular.module('HibiApp',
  [ 'ui.router'
  , 'angular.markdown'
  , 'ui.sortable'
  , 'ng.group'
  , 'app.models'
  , 'app.services'
  , 'app.controllers'
  , 'app.directives'
  , 'app.filters'
  ])
.config(function ($httpProvider, httpErrorHandler) {
  $httpProvider.interceptors.push(httpErrorHandler);
})
.config(function ($stateProvider, $urlRouterProvider) {
  $urlRouterProvider.otherwise('@{ClientR NewTasksTodayR}');

  #{rawJS (declareStates "$stateProvider")}
})
.run(function ($log, Billboard) {
  Billboard.watch(function (event) {
    if (null === event) return;

    var message = 'Billboard: ' + event.message;

    switch (event.severity) {
    case 'success': $log.info(message); break;
    case 'error': $log.warn(message); break;
    default:
      $log.warn('[Unexpected severity ' + event.severity + '] ' + message);
    }
  });
})
.run(function ($rootScope, Billboard) {
  $rootScope.$on('$stateChangeError', function (event, toState, toParams, fromState, fromParams, error) {
    var message;
    if (typeof(error) === 'string') {
      message = error;
    } else {
      message = JSON.stringify(error);
    }
    Billboard.error('Error changing to state ' + toState.name + ': ' + message, {timeout: 10000});
  });
})
.value('messageFromServer', #{toJSON mmsg})
.value('defaultTaskSchedule', #{toJSON Once})
.run(function (Billboard, messageFromServer) {
  if (messageFromServer) {
    Billboard.success(messageFromServer, {timeout: 10000});
  }
});
