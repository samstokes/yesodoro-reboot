function setupTaskHandlers(taskId) {
  var edit = false;

  var container = $('#' + taskId + ' .title').not('.ext-link');
  var title = container.find('.title');
  var form = container.find('form');
  var textBox = form.find('input[type=text]');

  function leaveEdit() {
    console.debug(taskId + ' leaveEdit');
    title.removeClass('hidden');
    form.addClass('hidden');
    edit = false;
  }
  function localSave() {
    console.debug(taskId + ' localSave');
    title.html(textBox.val());
    leaveEdit();
  }

  form.ajaxForm({
    success: localSave
  });

  textBox
    .blur(function () { if (edit) form.submit(); })
    .keyup(function (e) {
      console.debug(taskId + ' keyUp(' + e.keyCode + ')');
      switch (e.keyCode) {
      case 27: leaveEdit(); break;
      default: /* noop */
      }
    });

  container.click(function () {
    if (edit) return false;
    edit = true;

    console.debug(taskId + ' clicked');
    textBox.val(title.text());
    title.addClass('hidden');
    form.removeClass('hidden');
    textBox.focus();
  });


  var handle = $('#' + taskId + ' .reorder-handle');
  handle.find('form').ajaxForm();
}


function setupNotesHandlers(widgetId) {
  var container = $('#' + widgetId),
      handle = container.find('.notes-handle'),
      counter = handle.find('.counter'),
      notes = container.find('ol.notes'),
      template = container.find('.note-template'),
      form = container.find('form'),
      noteField = form.find('textarea');

  function localSave(data) {
    var noteLi = $('<li class="note">').html(renderNote(data[1]));
    notes.append(noteLi);
    form.clearForm();

    var numNotes = notes.find('li').length;
    counter.removeClass('hidden').html(numNotes);
    handle.removeClass('empty');

    noteField.focus();
  }

  function renderNote(note) {
    function paras(str) {
      return "<p>" + str.replace(/\n\n/g, "<\p><p>") + "<\p>";
    }
    return template.clone().removeClass('hidden')
      .find('.body').html(paras(note.body)).end();
  }

  form.ajaxForm({
    success: localSave
  });
}


$(function () {
  $('section#todo table tbody').sortable({
    distance: 15,
    handle: '.reorder-handle',
    start: function (event, ui) {
      var start_pos = ui.item.index();
      ui.item.data('start_pos', start_pos);
    },
    update: function (event, ui) {
      var start_pos = ui.item.data('start_pos'),
          end_pos = ui.item.index(),
          delta = end_pos - start_pos,
          form = ui.item.find('.reorder-handle form'),
          delta_input = form.find('input[type=number]');
      delta_input.val(delta);
      form.submit();
    }
  });

  $('tr.task').each(function (_, elem) {
    setupTaskHandlers(elem.id);

    var notesElem = $(elem).find('td.notes > div');
    switch (notesElem.length) {
    case 0: break;
    case 1:
      setupNotesHandlers(notesElem[0].id);
      break;
    default:
      console.warn("Found " + notesElem.length + " notes divs for " + elem.id);
    }
  });
});


var app = angular.module('HibiApp', []);


app.controller('PlansCtrl', function ($scope, $http, $log) {
  $scope.plans = #{toJSON activePlans};

  $scope.addNewPlan = function () {
    var plan = {id: '_new', plan: this.newPlan};
    this.newPlan = {};
    this.plans.splice(0, 0, plan);
    $http.post("/plans", plan.plan)
      .success(function (data, status, headers, config) {
        plan.id = data.id;
      }).error(function (data, status, headers, config) {
        plan.broken = true;
      });
  };

  $scope.removePlan = function (plan) {
    var index = this.plans.indexOf(plan);
    if (index > -1) {
      this.plans.splice(index, 1);
    }
  };

  $scope.completePlan = function (plan) {
    plan.going = true;
    var self = this;

    $http.post("/plans/" + plan.id + "/complete")
      .success(function (data, status, headers, config) {
        self.removePlan(plan);
      });
  };

  $scope.deletePlan = function (plan) {
    plan.going = true;
    var self = this;
    $http.delete("/plans/" + plan.id)
      .success(function (data, status, headers, config) {
        self.removePlan(plan);
      });
  };

  $scope.updatePlan = function (plan) {
    return $http.put("/plans/" + plan.id, plan.plan)
      .error(function (data, status, headers, config) {
        $log.warn("Failed to update plan:", arguments);
      });
  };
});


app.directive('ngBlur', function ($parse) {
  return function (scope, element, attrs) {
    var fn = $parse(attrs['ngBlur']);
    element.bind('blur', function (event) {
      scope.$apply(function () {
        fn(scope, {$event: event});
      });
    });
  };
});


app.directive('ssClickToEdit', function ($timeout) {
  return {
    restrict: 'E',

    scope: {
      value: '=ssModel',
      onEdit: '&ssOnEdit'
    },

    transclude: true,


    template: ' \
      <div ng-hide="editing" ng-click="switchToEdit()" ng-transclude /> \
      <input class="editor" \
          ng-model="value" \
          ng-show="editing" \
          ng-blur="editorBlur()" \
          ng-keyup="editorKeyup($event)" \
      /> \
    ',


    link: function (scope, element, attrs) {

      scope.editing = false;

      scope.switchToEdit = function () {
        var editor = element.find('input.editor');
        $timeout(function () { editor.focus(); });
        this.original = this.value;
        this.editing = true;
      };

      scope.leaveEdit = function (discard) {
        this.editing = false;

        if (discard) {
          this.value = this.original;
        }
      };

      scope.save = function () {
        this.onEdit().then(
          angular.bind(this, this.leaveEdit, false),
          angular.bind(this, this.leaveEdit, true));
      };

      scope.editorBlur = function () {
        if (this.editing) {
          this.save();
        }
      };

      scope.editorKeyup = function (event) {
        switch (event.keyCode) {
        case 13: this.save(); break;
        case 27: this.leaveEdit(true); break;
        default: /* noop */
        }
      };

    }
  };
});
